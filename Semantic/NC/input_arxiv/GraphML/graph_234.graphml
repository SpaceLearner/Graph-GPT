<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="relation" for="edge" attr.name="relation" attr.type="string" />
  <key id="abstract" for="node" attr.name="abstract" attr.type="string" />
  <key id="title" for="node" attr.name="title" attr.type="string" />
  <graph edgedefault="undirected">
    <node id="P96019">
      <data key="title">a survey on data plane flexibility and programmability in software defined networking</data>
      <data key="abstract">Software-defined networking (SDN) has attracted the attention of the research community in recent years, as evidenced by a large number of survey and review papers. The architecture of SDN clearly recognizes three planes: application, control, and data planes. The application plane executes network applications, the control plane regulates the rules for the entire network based on the requests generated by network applications, and based on the set rules, the controller configures the switches in the data plane. The role of the switch in the data plane is to simply forward packets based on the instructions given by the controller. By analyzing the SDN-related research papers, it is observed that research, from the very beginning, is insufficiently focused on the data plane. Therefore, this paper gives a comprehensive overview of the data plane survey with a particular emphasis on the problem of programmability and flexibility. The first part of the survey is dedicated to the evaluation of actual data plane architectures through several definitions and aspects of data plane flexibility and programmability. Then, an overview of the SDN-related research was presented with the aim of identifying the key factors influencing the gradual deviation from the original data plane architectures given with ForCES and OpenFlow specifications. In this paper, we used the term data plane evolution for this deviation. By establishing a correlation between the treated problem and the problem-solving approaches, the limitations of ForCES and OpenFlow data plane architectures were identified. Based on the identified limitations, a generalization of approaches to addressing the problem of data plane flexibility and programmability has been made. By examining the generalized approaches, open issues have been identified, establishing the grounds for future research directions proposal.</data>
    </node>
    <node id="P101854">
      <data key="title">controller selection in a wireless mesh sdn under network partitioning and merging scenarios</data>
      <data key="abstract">In this paper we consider a Wireless Mesh Network (WMN) integrating SDN principles. The Wireless Mesh Routers (WMR) are OpenFlow capable switches that can be controlled by SDN controllers, according to the wmSDN (wireless mesh SDN) architecture that we have introduced in a previous work. We consider the issue of controller selection in a scenario with intermittent connectivity. We assume that over time a single WMN can become split in two or more partitions and that separate partitions can merge into a larger one. We assume that a set of SDN controllers can potentially take control of the WMRs. At a given time only one controller should be the master of a WMR and it should be the most appropriate one according to some metric. We argue that the state of the art solutions for "master election" among distributed controllers are not suitable in a mesh networking environment, as they could easily be affected by inconsistencies. We envisage a "master selection" approach which is under the control of each WMR, and guarantees that at a given time only one controller will be master of a WMR. We designed a specific master selection procedure which is very simple in terms of the control logic to be executed in the WMR. We have implemented the proposed solution and deployed it over a network emulator (CORE) and over the combination of two physical wireless testbeds (NITOS and wiLab.t).</data>
    </node>
    <node id="P12490">
      <data key="title">energy efficient and resilient infrastructure for fog computing health monitoring applications</data>
      <data key="abstract">In this paper, we propose a resilient energy efficient and fog computing infrastructure for health monitoring applications. We design the infrastructure to be resilient against server failures under two scenarios; without geographical constraints and with geographical constraints. We consider a heart monitoring application where patients send their 30-seconds recording of Electrocardiogram (ECG) signal for processing, analysis and decision making at both primary and backup servers. A Mixed Integer Linear Programming (MILP) model is used to optimize the number and locations of the primary and backup processing servers so that the energy consumption of both the processing and networking equipment are minimized. The results show that considering geographical constraints yields a network energy consumption increase by up to 9% compared to without geographical constraint. The results also show that, increasing the number of processing servers that can be served at each candidate node can reduce the energy consumption of networking equipment besides reducing the rate of energy increase of networking equipment due to increasing level of demand.</data>
    </node>
    <node id="P293">
      <data key="title">computing backup forwarding rules in software defined networks</data>
      <data key="abstract">The past century of telecommunications has shown that failures in networks are prevalent. Although much has been done to prevent failures, network nodes and links are bound to fail eventually. Failure recovery processes are therefore needed. Failure recovery is mainly influenced by (1) detection of the failure, and (2) circumvention of the detected failure. However, especially in SDNs where controllers recompute network state reactively, this leads to high delays. Hence, next to primary rules, backup rules should be installed in the switches to quickly detour traffic once a failure occurs. In this work, we propose algorithms for computing an all-to-all primary and backup network forwarding configuration that is capable of circumventing link and node failures. Omitting the high delay invoked by controller recomputation through preconfiguration, our proposal's recovery delay is close to the detection time which is significantly below the 50 ms rule of thumb. After initial recovery, we recompute network configuration to guarantee protection from future failures. Our algorithms use packet-labeling to guarantee correct and shortest detour forwarding. The algorithms and labeling technique allow packets to return to the primary path and are able to discriminate between link and node failures. The computational complexity of our solution is comparable to that of all-to-all-shortest paths computations. Our experimental evaluation on both real and generated networks shows that network configuration complexity highly decreases compared to classic disjoint paths computations. Finally, we provide a proof-of-concept OpenFlow controller in which our proposed configuration is implemented, demonstrating that it readily can be applied in production networks.</data>
    </node>
    <node id="P157054">
      <data key="title">network coding based protection strategy against node failures</data>
      <data key="abstract">The enormous increase in the usage of communication networks has made protection against node and link failures essential in the deployment of reliable networks. To prevent loss of data due to node failures, a network protection strategy is proposed that aims to withstand such failures. Particularly, a protection strategy against any single node failure is designed for a given network with a set of $n$ disjoint paths between senders and receivers. Network coding and reduced capacity are deployed in this strategy without adding extra working paths to the readily available connection paths. This strategy is based on protection against node failures as protection against multiple link failures. In addition, the encoding and decoding operational aspects of the premeditated protection strategy are demonstrated.</data>
    </node>
    <node id="P121672">
      <data key="title">softcell taking control of cellular core networks</data>
      <data key="abstract">Existing cellular networks suffer from inflexible and expensive equipment, and complex control-plane protocols. To address these challenges, we present SoftCell, a scalable architecture for supporting fine-grained policies for mobile devices in cellular core networks. The SoftCell controller realizes high-level service polices by directing traffic over paths that traverse a sequence of middleboxes, optimized to the network conditions and user locations. To ensure scalability, the core switches forward traffic on hierarchical addresses (grouped by base station) and policy tags (identifying paths through middleboxes). This minimizes data-plane state in the core switches, and pushes all fine-grained state to software switches at the base stations. These access switches apply fine-grained rules, specified by the controller, to map all traffic to the appropriate addresses and tags. SoftCell guarantees that packets in the same connection traverse the same sequence of middleboxes in both directions, even in the presence of mobility. Our characterization of real LTE workloads, micro-benchmarks on our prototype controller, and large-scale simulations demonstrate that SoftCell improves the flexibility of cellular core networks, while enabling the use of inexpensive commodity switches and middleboxes.</data>
    </node>
    <node id="P11077">
      <data key="title">fog assisted caching employing solar renewable energy for delivering video on demand service</data>
      <data key="abstract">This paper examines the reduction in brown power consumption of transport networks and data centres achieved by caching Video-on-Demand (VoD) contents in solar-powered fog data centers with Energy Storage Devices (ESDs). A Mixed Integer Linear Programming (MILP) model was utilized to optimize the delivery from cloud or fog data centres. The results reveal that for brown-powered cloud and fog data centres with same Power Usage Effectiveness (PUE), a saving by up to 77% in transport network power consumption can be achieved by delivering VoD demands from fog data centres. With fully renewable-powered cloud data centres and partially solar-powered fog data centres, savings of up to 26% can be achieved when considering 250 m2 solar cells. Additional saving by up to 14% can be achieved with ESDs of 50 kWh capacity.</data>
    </node>
    <node id="P58514">
      <data key="title">towards wire speed platform agnostic control of openflow switches</data>
      <data key="abstract">The possibility to offload, via a platform-agnostic specification, the execution of (some/part of the) control functions down to the switch and operate them at wire speed based on packet level events, would yield significant benefits in terms of control latency and reaction times, meanwhile retaining the SDN-type ability to program and instantiate a desired network operation from a central controller. While programmability inside the switches, at wire speed and using platform-independent abstractions, of “any possible” control function seems well beyond the OpenFlow capabilities, in this paper 1 we argue that a non trivial sub-class of stateful control functions, namely those that can be abstracted in terms of Mealy (Finite State) Machines, is already compatible with off-the-shelf OpenFlow version 1.1+ Hardware with marginal architectural modifications. With minimal additional hardware circuitry, the above sub-class can be extended to include support for bidirectional/cross-flow state handling. We demonstrate the viability of our proposed approach via two proof-of-concept implementations (hardware and software), and we show how some stateful control functionalities frequently exploited in network protocols are readily deployed using our application programming interface.</data>
    </node>
    <node id="P45204">
      <data key="title">a decentralized approach to software defined networks sdns</data>
      <data key="abstract">Redistribution of the intelligence and management in the software defined networks (SDNs) is a potential approach to address the bottlenecks of scalability and integrity of these networks. We propose to revisit the routing concept based on the notion of regions. Using basic and consistent definition of regions, a region-based packet routing called SmartRegion Routing is presented. The flexibility of regions in terms of naming and addressing is then leveraged in the form of a region stack among other features placed in the associated packet header. In this way, most of complexity and dynamicity of a network is absorbed, and therefore highly fast and simplified routing at the inter-region level along with semi-autonomous intra-region routing will be feasible. In addition, multipath planning can be naturally realized at both inter and intra levels. A basic form of SmartRegion routing mechanism is provided. Simplicity, scalability, and manageability of the proposed approach would also bring future potentials to reduce energy consumption and environmental footprint associated to the SDNs. Finally, various applications, such as enabling seamless broadband access, providing beyond IP addressing mechanisms, and also address-equivalent naming mechanisms, are considered and discussed.</data>
    </node>
    <node id="P37355">
      <data key="title">near optimal routing protection for in band software defined heterogeneous networks</data>
      <data key="abstract">Facing the spectrum supply–demand gap, heterogeneous network (HetNet) is a promising approach to achieve drastic gains in network coverage and capacity compared with macro-only networks, thus making it especially attractive to network operators. On the other hand, software-defined networking brings a number of advantages along with many challenges. One particular concern is on the resilience for in-band fashioned control plane. Existing approaches mainly rely on a  local rerouting  policy when performing the routing protection for the target sessions in software-defined networks. However, such a policy would potentially bring congestions in the neighbouring links of the failed one. To this end, we study a weighted cost-minimization problem, where the traffic load balancing and control-channel setup cost are jointly considered. Because this problem is NP-hard, we first propose a near-optimal  Markov approximation -based approach for in-band-fashioned software-defined HetNets. We then extend our solution to an online case that handles a single-link failure. We also conduct theoretical analysis on the performance fluctuation due to the single-link failure. We finally carry out experiments by experimental simulation. The extensive numerical results show that the proposed algorithm has fast convergence and high efficiency in resource utilization.</data>
    </node>
    <node id="P137562">
      <data key="title">detour planning for fast and reliable failure recovery in sdn with openstate</data>
      <data key="abstract">A reliable and scalable mechanism to provide protection against a link or node failure has additional requirements in the context of SDN and OpenFlow. Not only it has to minimize the load on the controller, but it must be able to react even when the controller is unreachable. In this paper we present a protection scheme based on precomputed backup paths and inspired by MPLS “crankback” routing, that guarantees instantaneous recovery times and aims at zero packet-loss after failure detection, regardless of controller reachability, even when OpenFlow's “fast-failover” feature cannot be used. The proposed mechanism is based on OpenState, an OpenFlow extension that allows a programmer to specify how forwarding rules should autonomously adapt in a stateful fashion, reducing the need to rely on remote controllers. We present the scheme as well as two different formulations for the computation of backup paths.</data>
    </node>
    <node id="P153015">
      <data key="title">spider fault resilient sdn pipeline with recovery delay guarantees</data>
      <data key="abstract">When dealing with node or link failures in Software Defined Networking (SDN), the network capability to establish an alternative path depends on controller reachability and on the round trip times (RTTs) between controller and involved switches. Moreover, current SDN data plane abstractions for failure detection (e.g. OpenFlow "Fast-failover") do not allow programmers to tweak switches' detection mechanism, thus leaving SDN operators still relying on proprietary management interfaces (when available) to achieve guaranteed detection and recovery delays. We propose SPIDER, an OpenFlow-like pipeline design that provides i) a detection mechanism based on switches' periodic link probing and ii) fast reroute of traffic flows even in case of distant failures, regardless of controller availability. SPIDER can be implemented using stateful data plane abstractions such as OpenState or Open vSwitch, and it offers guaranteed short (i.e. ms) failure detection and recovery delays, with a configurable trade off between overhead and failover responsiveness. We present here the SPIDER pipeline design, behavioral model, and analysis on flow tables' memory impact. We also implemented and experimentally validated SPIDER using OpenState (an OpenFlow 1.3 extension for stateful packet processing), showing numerical results on its performance in terms of recovery latency and packet losses.</data>
    </node>
    <node id="P19600">
      <data key="title">software defined networking a comprehensive survey</data>
      <data key="abstract">Software-Defined Networking (SDN) is an emerging paradigm that promises to change this state of affairs, by breaking vertical integration, separating the network's control logic from the underlying routers and switches, promoting (logical) centralization of network control, and introducing the ability to program the network. The separation of concerns introduced between the definition of network policies, their implementation in switching hardware, and the forwarding of traffic, is key to the desired flexibility: by breaking the network control problem into tractable pieces, SDN makes it easier to create and introduce new abstractions in networking, simplifying network management and facilitating network evolution. In this paper we present a comprehensive survey on SDN. We start by introducing the motivation for SDN, explain its main concepts and how it differs from traditional networking, its roots, and the standardization activities regarding this novel paradigm. Next, we present the key building blocks of an SDN infrastructure using a bottom-up, layered approach. We provide an in-depth analysis of the hardware infrastructure, southbound and northbound APIs, network virtualization layers, network operating systems (SDN controllers), network programming languages, and network applications. We also look at cross-layer problems such as debugging and troubleshooting. In an effort to anticipate the future evolution of this new paradigm, we discuss the main ongoing research efforts and challenges of SDN. In particular, we address the design of switches and control platforms -- with a focus on aspects such as resiliency, scalability, performance, security and dependability -- as well as new opportunities for carrier transport networks and cloud providers. Last but not least, we analyze the position of SDN as a key enabler of a software-defined environment.</data>
    </node>
    <node id="P113509">
      <data key="title">on diagnosis of forwarding plane via static forwarding rules in software defined networks</data>
      <data key="abstract">Software Defined Networks (SDN) decouple the forwarding and control planes from each other. The control plane is assumed to have a global knowledge of the underlying physical and/or logical network topology so that it can monitor, abstract and control the forwarding plane. In our paper, we present solutions that install an optimal or near-optimal (i.e., within 14% of the optimal) number of static forwarding rules on switches/routers so that any controller can verify the topology connectivity and detect/locate link failures at data plane speeds without relying on state updates from other controllers. Our upper bounds on performance indicate that sub-second link failure localization is possible even at data-center scale networks. For networks with hundreds or few thousand links, tens of milliseconds of latency is achievable.</data>
    </node>
    <node id="P76116">
      <data key="title">bounds for energy efficient survivable ip over wdm networks with network coding</data>
      <data key="abstract">In this work, we establish analytic bounds for the energy efficiency of 1+1 survivable IP over WDM networks using network coding. The analytic bounds are shown to be in close agreement with our previously reported results. They provide verification of the MILP and heuristics proposed previously, in addition to an efficient, compact means to evaluate network results and allow the performance of large networks to be determined easily.</data>
    </node>
    <node id="P77630">
      <data key="title">disaggregation for improved efficiency in fog computing era</data>
      <data key="abstract">This paper evaluates the impact of using disaggregated servers in the near-edge of telecom networks (metro central offices, radio cell sites and enterprise branch office which form part of a Fog as a Service system) to minimize the number of fog nodes required in the far-edge of telecom networks. We formulated a mixed integer linear programming (MILP) model to this end. Our results show that replacing traditional servers with disaggregated servers in the near-edge of the telecom network can reduce the number of far-edge fog nodes required by up to 50% if access to near-edge computing resources is not limited by network bottlenecks. This improved efficiency is achieved at the cost of higher average hop count between workload sources and processing locations and marginal increases in overall metro and access networks traffic and power consumption.</data>
    </node>
    <node id="P109931">
      <data key="title">achieving maximum energy efficiency in multi relay ofdma cellular networks a fractional programming approach</data>
      <data key="abstract">In this paper, the joint power and subcarrier allocation problem is solved in the context of maximizing the energy-efficiency (EE) of a multi-user, multi-relay orthogonal frequency division multiple access (OFDMA) cellular network, where the objective function is formulated as the ratio of the spectral-efficiency (SE) over the total power dissipation. It is proven that the fractional programming problem considered is quasi-concave so that Dinkelbach's method may be employed for finding the optimal solution at a low complexity. This method solves the above-mentioned master problem by solving a series of parameterized concave secondary problems. These secondary problems are solved using a dual decomposition approach, where each secondary problem is further decomposed into a number of similar subproblems. The impact of various system parameters on the attainable EE and SE of the system employing both EE maximization (EEM) and SE maximization (SEM) algorithms is characterized. In particular, it is observed that increasing the number of relays for a range of cell sizes, although marginally increases the attainable SE, reduces the EE significantly. It is noted that the highest SE and EE are achieved, when the relays are placed closer to the BS to take advantage of the resultant line-of-sight link. Furthermore, increasing both the number of available subcarriers and the number of active user equipment (UE) increases both the EE and the total SE of the system as a benefit of the increased frequency and multi-user diversity, respectively. Finally, it is demonstrated that as expected, increasing the available power tends to improve the SE, when using the SEM algorithm. By contrast, given a sufficiently high available power, the EEM algorithm attains the maximum achievable EE and a suboptimal SE.</data>
    </node>
    <node id="P160337">
      <data key="title">network protection codes against link failures using network coding</data>
      <data key="abstract">Protecting against link failures in communication networks is essential to increase robustness, accessibility, and reliability of data transmission. Recently, network coding has been proposed as a solution to provide agile and cost efficient network protection against link failures, which does not require data rerouting, or packet retransmission. To achieve this, separate paths have to be provisioned to carry encoded packets, hence requiring either the addition of extra links, or reserving some of the resources for this purpose. In this paper, we propose network protection codes against a single link failure using network coding, where a separate path using reserved links is not needed. In this case portions of the link capacities are used to carry the encoded packets. The scheme is extended to protect against multiple link failures and can be implemented at an overlay layer. Although this leads to reducing the network capacity, the network capacity reduction is asymptotically small in most cases of practical interest. We demonstrate that such network protection codes are equivalent to error correcting codes for erasure channels. Finally, we study the encoding and decoding operations of such codes over the binary field.</data>
    </node>
    <node id="P153801">
      <data key="title">software defined optical networks sdons a comprehensive survey</data>
      <data key="abstract">The emerging software defined networking (SDN) paradigm separates the data plane from the control plane and centralizes network control in an SDN controller. Applications interact with controllers to implement network services, such as network transport with quality of service. SDN facilitates the virtualization of network functions so that multiple virtual networks can operate over a given installed physical network infrastructure. Due to the specific characteristics of optical (photonic) communication components and the high optical transmission capacities, SDN-based optical networking poses particular challenges, but holds also great potential. In this article, we comprehensively survey studies that examine the SDN paradigm in optical networks; in brief, we survey the area of software defined optical networks (SDONs). We mainly organize the SDON studies into studies focused on the infrastructure layer, the control layer, and the application layer. Moreover, we cover SDON studies focused on network virtualization, as well as SDON studies focused on the orchestration of multilayer and multidomain networking. Based on the survey, we identify open challenges for SDONs and outline future directions.</data>
    </node>
    <node id="P123357">
      <data key="title">bringing sdn to the mobile edge</data>
      <data key="abstract">Nowadays, Software Defined Network (SDN) architectures and applications are revolutionizing the way wired networks are built and operate. However, little is known about the potential of this disruptive technology in wireless mobile networks. In fact, SDN is based on a centralized network control principle, while existing mobile network protocols give emphasis on the distribution of network resources and their management. Therefore, it is challenging to apply SDN ideas in the context of mobile networks. In this paper, we propose methods to overcome these challenges and make SDN more suitable for the mobile environment. Our main idea is to combine centralized SDN and distributed control in a hybrid design that takes the best of the two paradigms; (i) global network view and control programmability of SDN and (ii) robustness of distributed protocols. We discuss the pros and cons of each method and highlight them in an SDN prototype implementation built using off-the-shelf mobile devices.</data>
    </node>
    <edge source="P96019" target="P137562">
      <data key="relation">reference</data>
    </edge>
    <edge source="P96019" target="P58514">
      <data key="relation">reference</data>
    </edge>
    <edge source="P96019" target="P19600">
      <data key="relation">reference</data>
    </edge>
    <edge source="P101854" target="P37355">
      <data key="relation">reference</data>
    </edge>
    <edge source="P12490" target="P76116">
      <data key="relation">reference</data>
    </edge>
    <edge source="P293" target="P137562">
      <data key="relation">reference</data>
    </edge>
    <edge source="P293" target="P153015">
      <data key="relation">reference</data>
    </edge>
    <edge source="P157054" target="P76116">
      <data key="relation">reference</data>
    </edge>
    <edge source="P157054" target="P160337">
      <data key="relation">reference</data>
    </edge>
    <edge source="P121672" target="P123357">
      <data key="relation">reference</data>
    </edge>
    <edge source="P11077" target="P76116">
      <data key="relation">reference</data>
    </edge>
    <edge source="P58514" target="P137562">
      <data key="relation">reference</data>
    </edge>
    <edge source="P58514" target="P45204">
      <data key="relation">reference</data>
    </edge>
    <edge source="P37355" target="P137562">
      <data key="relation">reference</data>
    </edge>
    <edge source="P37355" target="P109931">
      <data key="relation">reference</data>
    </edge>
    <edge source="P37355" target="P113509">
      <data key="relation">reference</data>
    </edge>
    <edge source="P137562" target="P123357">
      <data key="relation">reference</data>
    </edge>
    <edge source="P137562" target="P76116">
      <data key="relation">reference</data>
    </edge>
    <edge source="P137562" target="P153015">
      <data key="relation">reference</data>
    </edge>
    <edge source="P19600" target="P153801">
      <data key="relation">reference</data>
    </edge>
    <edge source="P19600" target="P123357">
      <data key="relation">reference</data>
    </edge>
    <edge source="P76116" target="P160337">
      <data key="relation">reference</data>
    </edge>
    <edge source="P76116" target="P153801">
      <data key="relation">reference</data>
    </edge>
    <edge source="P76116" target="P77630">
      <data key="relation">reference</data>
    </edge>
  </graph>
</graphml>
